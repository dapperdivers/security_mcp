name: Docker Build and Push

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Bearer MCP Server
            org.opencontainers.image.description=MCP server that wraps the Bearer CLI security scanning tool
            org.opencontainers.image.vendor=Bearer
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' || inputs.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BEARER_VERSION=1.50.0
          provenance: true
          sbom: true

      - name: Generate SLSA attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  docker-test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker-build]
    if: always() && needs.docker-build.result == 'success'
    strategy:
      matrix:
        platform: [linux/amd64]  # Only test amd64 in CI for speed
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get first image tag
        id: get-tag
        run: |
          FIRST_TAG=$(echo '${{ needs.docker-build.outputs.image-tags }}' | head -n1)
          echo "tag=${FIRST_TAG}" >> $GITHUB_OUTPUT

      - name: Test image startup
        run: |
          echo "Testing Docker image: ${{ steps.get-tag.outputs.tag }}"
          
          # Test container can start and Bearer CLI works
          timeout 30s docker run --rm --platform ${{ matrix.platform }} \
            --name bearer-test-${{ github.run_id }} \
            ${{ steps.get-tag.outputs.tag }} \
            sh -c "bearer version && python -c 'import bearer_mcp; print(\"Import successful\")'"

      - name: Test MCP server functionality
        run: |
          # Create a test workspace
          mkdir -p test_workspace
          echo 'print("test")' > test_workspace/test.py
          
          # Test both transport modes
          echo "Testing STDIO transport..."
          timeout 10s docker run --rm --platform ${{ matrix.platform }} \
            -v "$(pwd)/test_workspace:/workspace" \
            -e MCP_TRANSPORT=stdio \
            -e MCP_WORKING_DIRECTORY=/workspace \
            ${{ steps.get-tag.outputs.tag }} || true
          
          echo "Testing SSE transport..."
          timeout 10s docker run --rm --platform ${{ matrix.platform }} \
            -v "$(pwd)/test_workspace:/workspace" \
            -e MCP_TRANSPORT=sse \
            -e MCP_WORKING_DIRECTORY=/workspace \
            -p 8000:8000 \
            ${{ steps.get-tag.outputs.tag }} || true

      - name: Security scan of built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-tag.outputs.tag }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  docker-sign:
    name: Sign Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [docker-build, docker-test]
    if: github.event_name != 'pull_request' && needs.docker-build.result == 'success' && needs.docker-test.result == 'success'
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign images with Cosign
        env:
          TAGS: ${{ needs.docker-build.outputs.image-tags }}
          DIGEST: ${{ needs.docker-build.outputs.image-digest }}
        run: |
          echo "Signing images with digest: ${DIGEST}"
          echo "${TAGS}" | while IFS= read -r tag; do
            [ -n "$tag" ] && cosign sign --yes "${tag}@${DIGEST}"
          done

  update-readme:
    name: Update README with new image info
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/main' && needs.docker-build.result == 'success'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update README with latest image tag
        run: |
          # Extract the version tag if available
          LATEST_TAG=$(echo '${{ needs.docker-build.outputs.image-tags }}' | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || echo '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest')
          
          if [ -f README.md ]; then
            # Update Docker pull command in README if it exists
            sed -i "s|docker pull .*bearer.*|docker pull ${LATEST_TAG}|g" README.md
            
            # Commit if there are changes
            if git diff --quiet README.md; then
              echo "No README updates needed"
            else
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add README.md
              git commit -m "docs: update Docker image reference to ${LATEST_TAG}"
              git push
            fi
          fi

  docker-summary:
    name: Docker Build Summary
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test, docker-sign]
    if: always()
    
    steps:
      - name: Print summary
        run: |
          echo "=== Docker Build & Push Summary ==="
          echo "Build Status: ${{ needs.docker-build.result }}"
          echo "Test Status: ${{ needs.docker-test.result }}"
          echo "Signing Status: ${{ needs.docker-sign.result }}"
          echo ""
          echo "Built Images:"
          echo '${{ needs.docker-build.outputs.image-tags }}' | while IFS= read -r tag; do
            [ -n "$tag" ] && echo "  - $tag"
          done
          echo ""
          echo "Image Digest: ${{ needs.docker-build.outputs.image-digest }}"
          echo ""
          if [ "${{ needs.docker-build.result }}" = "success" ] && [ "${{ needs.docker-test.result }}" = "success" ]; then
            echo "✓ Docker build and test completed successfully!"
            if [ "${{ needs.docker-sign.result }}" = "success" ]; then
              echo "✓ Images signed with Cosign"
            fi
          else
            echo "✗ Docker build or test failed"
            exit 1
          fi