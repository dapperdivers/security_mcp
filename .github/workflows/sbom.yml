name: SBOM Generation & Management

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  release:
    types: [published]
  schedule:
    # Generate SBOM weekly on Sundays at 1 AM UTC
    - cron: '0 1 * * 0'
  workflow_dispatch:
    inputs:
      include_vulnerabilities:
        description: 'Include vulnerability data in SBOM'
        required: false
        default: true
        type: boolean
      upload_to_registry:
        description: 'Upload SBOM to container registry'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  security-events: write
  packages: write
  attestations: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  python-sbom:
    name: Generate Python SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      sbom-python-hash: ${{ steps.hash-sbom.outputs.python-hash }}
      sbom-audit-hash: ${{ steps.hash-sbom.outputs.audit-hash }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install SBOM generation tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # Install SBOM tools with specific versions for reproducibility
          pip install 'cyclonedx-python-lib>=7.0.0,<10.0.0'
          pip install 'pip-audit>=2.9.0'
          pip install cyclonedx-py
          pip install cyclonedx-bom>=4.0.0
          
          # Install project dependencies
          pip install -r requirements.txt
          pip install -e . 2>/dev/null || echo "Package not installable in dev mode"
          
          # Verify tool versions
          echo "=== Tool Versions ==="
          cyclonedx-py --version
          pip-audit --version

      - name: Generate Python environment SBOM
        id: python-sbom
        run: |
          echo "=== Generating Python Environment SBOM ==="
          
          # Generate comprehensive SBOM from installed packages
          cyclonedx-py environment \
            --of JSON \
            --output-file sbom-python-env.json
          
          # Generate SBOM from requirements.txt
          cyclonedx-py requirements requirements.txt \
            --of JSON \
            --output-file sbom-python-requirements.json
          
          # Validate generated SBOMs
          for sbom_file in sbom-python-*.json; do
            if [ -f "$sbom_file" ]; then
              echo "Validating $sbom_file..."
              if jq -e '.bomFormat == "CycloneDX"' "$sbom_file" >/dev/null 2>&1; then
                COMPONENTS=$(jq '.components | length' "$sbom_file")
                echo "✅ $sbom_file: Valid CycloneDX format with $COMPONENTS components"
              else
                echo "❌ $sbom_file: Invalid format"
                exit 1
              fi
            fi
          done

      - name: Generate vulnerability SBOM with pip-audit
        id: vuln-sbom
        if: inputs.include_vulnerabilities != false
        run: |
          echo "=== Generating Vulnerability SBOM ==="
          
          # Generate SBOM with vulnerability data
          pip-audit \
            --format=cyclonedx-json \
            --output=sbom-vulnerabilities.json \
            --require-hashes || echo "pip-audit completed (vulnerabilities may exist)"
          
          # Generate detailed vulnerability report
          pip-audit \
            --format=json \
            --output=vulnerability-report.json || echo "Vulnerability scan completed"
          
          # Validate vulnerability SBOM if created
          if [ -f "sbom-vulnerabilities.json" ]; then
            echo "Validating vulnerability SBOM..."
            if jq -e '.bomFormat == "CycloneDX"' sbom-vulnerabilities.json >/dev/null 2>&1; then
              VULNS=$(jq '[.vulnerabilities[]? // empty] | length' sbom-vulnerabilities.json 2>/dev/null || echo 0)
              echo "✅ Vulnerability SBOM: Valid CycloneDX format with $VULNS vulnerabilities"
            else
              echo "⚠️ Vulnerability SBOM format validation failed"
            fi
          else
            echo "ℹ️ No vulnerability SBOM generated (likely no vulnerabilities found)"
          fi

      - name: Calculate SBOM hashes
        id: hash-sbom
        run: |
          echo "=== Calculating SBOM Hashes ==="
          
          if [ -f "sbom-python-env.json" ]; then
            PYTHON_HASH=$(sha256sum sbom-python-env.json | cut -d' ' -f1)
            echo "python-hash=$PYTHON_HASH" >> $GITHUB_OUTPUT
            echo "Python SBOM SHA256: $PYTHON_HASH"
          fi
          
          if [ -f "sbom-vulnerabilities.json" ]; then
            AUDIT_HASH=$(sha256sum sbom-vulnerabilities.json | cut -d' ' -f1)
            echo "audit-hash=$AUDIT_HASH" >> $GITHUB_OUTPUT
            echo "Vulnerability SBOM SHA256: $AUDIT_HASH"
          fi

      - name: Upload Python SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-sbom-${{ github.run_number }}
          path: |
            sbom-python-*.json
            sbom-vulnerabilities.json
            vulnerability-report.json
          retention-days: 90
          compression-level: 6

  container-sbom:
    name: Generate Container SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [python-sbom]
    
    outputs:
      container-sbom-hash: ${{ steps.hash-container-sbom.outputs.container-hash }}
      image-digest: ${{ steps.build-image.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build container image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sbom-${{ github.run_number }}
          platforms: linux/amd64
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=sbom-${{ github.run_number }}

      - name: Generate container SBOM with Syft
        uses: anchore/sbom-action@v0.17.2
        id: syft-sbom
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sbom-${{ github.run_number }}
          format: spdx-json
          output-file: sbom-container.spdx.json

      - name: Generate container SBOM with Trivy
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Generate SBOM with Trivy
          trivy image --format spdx-json --output sbom-container-trivy.spdx.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sbom-${{ github.run_number }}

      - name: Validate container SBOMs
        run: |
          echo "=== Container SBOM Validation ==="
          
          # Validate Syft SBOM
          if [ -f "sbom-container.spdx.json" ]; then
            if jq -e '.spdxVersion' sbom-container.spdx.json >/dev/null 2>&1; then
              PACKAGES=$(jq '.packages | length' sbom-container.spdx.json)
              echo "✅ Syft SBOM: Valid SPDX format with $PACKAGES packages"
            else
              echo "❌ Syft SBOM: Invalid format"
              exit 1
            fi
          fi
          
          # Validate Trivy SBOM
          if [ -f "sbom-container-trivy.spdx.json" ]; then
            if jq -e '.spdxVersion' sbom-container-trivy.spdx.json >/dev/null 2>&1; then
              PACKAGES=$(jq '.packages | length' sbom-container-trivy.spdx.json)
              echo "✅ Trivy SBOM: Valid SPDX format with $PACKAGES packages"
            else
              echo "❌ Trivy SBOM: Invalid format"
              exit 1
            fi
          fi

      - name: Calculate container SBOM hashes
        id: hash-container-sbom
        run: |
          echo "=== Calculating Container SBOM Hashes ==="
          
          if [ -f "sbom-container.spdx.json" ]; then
            CONTAINER_HASH=$(sha256sum sbom-container.spdx.json | cut -d' ' -f1)
            echo "container-hash=$CONTAINER_HASH" >> $GITHUB_OUTPUT
            echo "Container SBOM SHA256: $CONTAINER_HASH"
          fi

      - name: Upload container SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ github.run_number }}
          path: |
            sbom-container*.spdx.json
          retention-days: 90
          compression-level: 6

  sbom-attestation:
    name: Generate SBOM Attestations
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [python-sbom, container-sbom]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-sbom-${{ github.run_number }}"
          merge-multiple: true

      - name: Generate SLSA attestations for SBOMs
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-path: |
            sbom-*.json
            sbom-*.spdx.json

      - name: Create SBOM summary
        run: |
          echo "# SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Generated SBOMs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for sbom_file in sbom-*.json sbom-*.spdx.json; do
            if [ -f "$sbom_file" ]; then
              FILE_SIZE=$(du -h "$sbom_file" | cut -f1)
              FILE_HASH=$(sha256sum "$sbom_file" | cut -d' ' -f1)
              echo "- **$sbom_file**: $FILE_SIZE (SHA256: \`${FILE_HASH:0:16}...\`)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Hashes" >> $GITHUB_STEP_SUMMARY
          echo "- Python SBOM: \`${{ needs.python-sbom.outputs.sbom-python-hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Container SBOM: \`${{ needs.container-sbom.outputs.container-sbom-hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Attestations" >> $GITHUB_STEP_SUMMARY
          echo "SLSA attestations generated for all SBOM files." >> $GITHUB_STEP_SUMMARY

  sbom-distribution:
    name: Distribute SBOMs
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [python-sbom, container-sbom, sbom-attestation]
    if: (github.event_name == 'release' || inputs.upload_to_registry == true) && always()
    
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-sbom-${{ github.run_number }}"
          merge-multiple: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SBOMs to registry as artifacts
        run: |
          echo "=== Uploading SBOMs to Container Registry ==="
          
          # Create manifest for SBOM distribution
          cat > sbom-manifest.json << EOF
          {
            "schemaVersion": 2,
            "mediaType": "application/vnd.oci.image.manifest.v1+json",
            "sboms": {
              "python": {
                "files": $(ls sbom-python-*.json | jq -R . | jq -s .),
                "hash": "${{ needs.python-sbom.outputs.sbom-python-hash }}"
              },
              "container": {
                "files": $(ls sbom-container*.spdx.json | jq -R . | jq -s .),
                "hash": "${{ needs.container-sbom.outputs.container-sbom-hash }}"
              }
            },
            "generated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}"
          }
          EOF
          
          echo "Created SBOM manifest:"
          cat sbom-manifest.json | jq .

      - name: Create GitHub release with SBOMs
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom-*.json
            sbom-*.spdx.json
            sbom-manifest.json
          body_path: ${{ github.workspace }}/RELEASE_NOTES.md
          append_body: true
          generate_release_notes: true

  sbom-summary:
    name: SBOM Generation Summary
    runs-on: ubuntu-latest
    needs: [python-sbom, container-sbom, sbom-attestation, sbom-distribution]
    if: always()
    
    steps:
      - name: Generate final summary
        run: |
          echo "=== SBOM Generation Summary ==="
          echo "Python SBOM: ${{ needs.python-sbom.result }}"
          echo "Container SBOM: ${{ needs.container-sbom.result }}"
          echo "Attestation: ${{ needs.sbom-attestation.result }}"
          echo "Distribution: ${{ needs.sbom-distribution.result }}"
          echo ""
          
          FAILED_JOBS=0
          [ "${{ needs.python-sbom.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          [ "${{ needs.container-sbom.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          [ "${{ needs.sbom-attestation.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          [ "${{ needs.sbom-distribution.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          
          if [ $FAILED_JOBS -eq 0 ]; then
            echo "✅ SBOM generation completed successfully!"
            echo "All Software Bill of Materials have been generated and validated."
          else
            echo "⚠️ $FAILED_JOBS SBOM job(s) failed or had issues"
            echo "Please review the workflow logs for details."
          fi
          
          echo ""
          echo "📋 Generated SBOMs available in workflow artifacts"
          echo "🔒 SLSA attestations generated for supply chain security"
          echo "📦 SBOMs uploaded to release assets (if applicable)"