name: Comprehensive Security Scanning

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run at 3 AM UTC on Mondays to catch any issues
    - cron: '0 3 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis for static application security testing (SAST)
  codeql-analyze:
    name: CodeQL Analysis - Python
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          # Use extended security queries for comprehensive coverage
          queries: security-extended

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # Continue even if some dependencies fail to install

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "codeql:language/python"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install and run Safety check
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip
          pip install safety
          
          # Run safety check and continue on error to capture results
          echo "=== Checking for known vulnerabilities ==="
          safety check --continue-on-error || true

  bearer-scan:
    name: Bearer Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Bearer CLI
        run: |
          BEARER_VERSION=$(curl -s https://api.github.com/repos/Bearer/bearer/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo "Installing Bearer v${BEARER_VERSION}"
          curl -L -o /tmp/bearer.tar.gz \
            "https://github.com/Bearer/bearer/releases/download/v${BEARER_VERSION}/bearer_${BEARER_VERSION}_linux_amd64.tar.gz"
          sudo tar -xzf /tmp/bearer.tar.gz -C /usr/local/bin/
          sudo chmod +x /usr/local/bin/bearer
          bearer version

      - name: Run Bearer Security Scan
        continue-on-error: true
        run: |
          # Run Bearer scan and ensure SARIF file is created
          bearer scan . \
            --format sarif \
            --output bearer-results.sarif || echo '{"version":"2.1.0","runs":[]}' > bearer-results.sarif
          
          # Verify the file exists
          if [ -f bearer-results.sarif ]; then
            echo "Bearer SARIF file created successfully"
            echo "File size: $(ls -lh bearer-results.sarif | awk '{print $5}')"
          else
            echo "Creating empty SARIF file"
            echo '{"version":"2.1.0","runs":[]}' > bearer-results.sarif
          fi

      - name: Upload Bearer SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('bearer-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: bearer-results.sarif
          category: "bearer-security-scan"


  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container Security Scanning with Grype
  container-scan-grype:
    name: Container Scan - Grype
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t bearer-mcp:security-scan .

      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        id: grype
        continue-on-error: true
        with:
          image: bearer-mcp:security-scan
          fail-build: false
          severity-cutoff: none
          output-format: sarif

      - name: Upload Grype SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: "grype-container-scan"

  # Container Security Scanning with Trivy
  container-scan-trivy:
    name: Container Scan - Trivy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t bearer-mcp:security-scan .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: bearer-mcp:security-scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: trivy-results.sarif
          category: "trivy-container-scan"


  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analyze, dependency-check, bearer-scan, secrets-scan, container-scan-grype, container-scan-trivy]
    if: always()
    
    steps:
      - name: Security Scan Summary
        run: |
          echo "=== Comprehensive Security Scan Results Summary ==="
          echo "CodeQL Analysis: ${{ needs.codeql-analyze.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Bearer Scan: ${{ needs.bearer-scan.result }}"
          echo "Secret Detection: ${{ needs.secrets-scan.result }}"
          echo "Container Scan (Grype): ${{ needs.container-scan-grype.result }}"
          echo "Container Scan (Trivy): ${{ needs.container-scan-trivy.result }}"
          echo ""
          
          # Count successful scans
          SUCCESS_COUNT=0
          TOTAL_SCANS=6
          
          [ "${{ needs.codeql-analyze.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.dependency-check.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.bearer-scan.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.secrets-scan.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.container-scan-grype.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.container-scan-trivy.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          
          echo "Successfully completed: ${SUCCESS_COUNT}/${TOTAL_SCANS} scans"
          echo ""
          
          if [ "$SUCCESS_COUNT" -eq "$TOTAL_SCANS" ]; then
            echo "✓ All security scans completed successfully!"
            echo "All results have been uploaded to GitHub Security Dashboard."
          else
            echo "⚠ Some security scans encountered issues - review logs above"
            echo "Check the GitHub Security tab for detailed vulnerability reports."
          fi
          
          echo ""
          echo "=== Next Steps ==="
          echo "1. Review the Security tab in GitHub for detailed findings"
          echo "2. Address any critical or high severity vulnerabilities"
          echo "3. Check workflow logs for any scan failures"