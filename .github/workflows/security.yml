name: Security Scanning

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  sast-codeql:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  sca-dependency-scan:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip freeze > installed-requirements.txt

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=requirements.txt

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Run Safety check for known vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          
          # Convert Safety output to human readable
          if [ -f safety-report.json ]; then
            echo "=== Safety Security Report ==="
            python -c "
            import json
            try:
                with open('safety-report.json') as f:
                    data = json.load(f)
                    if data:
                        print(f'Found {len(data)} vulnerabilities:')
                        for vuln in data:
                            print(f'  {vuln.get(\"package\", \"unknown\")}: {vuln.get(\"vulnerability\", \"N/A\")}')
                    else:
                        print('No vulnerabilities found')
            except:
                print('Safety check completed')
            "
          fi

      - name: Upload Safety report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  bearer-sast-scan:
    name: Bearer SAST Scan (Dogfooding)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Bearer CLI
        run: |
          curl -L --retry 3 --retry-delay 5 \
            -o /tmp/bearer.tar.gz \
            "https://github.com/Bearer/bearer/releases/download/v1.50.0/bearer_1.50.0_linux_amd64.tar.gz"
          sudo tar -xzf /tmp/bearer.tar.gz -C /usr/local/bin/
          sudo chmod +x /usr/local/bin/bearer
          bearer version

      - name: Run Bearer Security Scan
        run: |
          bearer scan . \
            --format sarif \
            --output bearer-results.sarif \
            --severity medium,high,critical \
            --quiet || true
          
          # Also generate JSON report for artifacts
          bearer scan . \
            --format json \
            --output bearer-results.json \
            --severity medium,high,critical \
            --quiet || true

      - name: Upload Bearer SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bearer-results.sarif
          category: bearer-sast

      - name: Upload Bearer reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bearer-scan-results
          path: |
            bearer-results.sarif
            bearer-results.json

  semgrep-sast:
    name: Semgrep SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/python
          generateSarif: "1"
        env:
          SEMGREP_RULES: auto

      - name: Upload Semgrep results to GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [bearer-sast-scan]  # Run after Bearer scan to ensure no critical issues
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bearer-mcp:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bearer-mcp:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail on vulnerabilities in security scan

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: bearer-mcp:security-scan
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Scan SBOM with Grype
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          sbom: sbom.spdx.json
          fail-build: false

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-codeql, sca-dependency-scan, bearer-sast-scan, semgrep-sast, secrets-scan, container-scan]
    if: always()
    
    steps:
      - name: Security Scan Summary
        run: |
          echo "=== Security Scan Results Summary ==="
          echo "CodeQL SAST: ${{ needs.sast-codeql.result }}"
          echo "Dependency Scan: ${{ needs.sca-dependency-scan.result }}"
          echo "Bearer SAST: ${{ needs.bearer-sast-scan.result }}"
          echo "Semgrep SAST: ${{ needs.semgrep-sast.result }}"
          echo "Secret Detection: ${{ needs.secrets-scan.result }}"
          echo "Container Scan: ${{ needs.container-scan.result }}"
          echo ""
          
          FAILED_SCANS=0
          [ "${{ needs.sast-codeql.result }}" = "failure" ] && ((FAILED_SCANS++))
          [ "${{ needs.sca-dependency-scan.result }}" = "failure" ] && ((FAILED_SCANS++))
          [ "${{ needs.bearer-sast-scan.result }}" = "failure" ] && ((FAILED_SCANS++))
          [ "${{ needs.semgrep-sast.result }}" = "failure" ] && ((FAILED_SCANS++))
          [ "${{ needs.secrets-scan.result }}" = "failure" ] && ((FAILED_SCANS++))
          [ "${{ needs.container-scan.result }}" = "failure" ] && ((FAILED_SCANS++))
          
          if [ $FAILED_SCANS -eq 0 ]; then
            echo "✓ All security scans completed successfully!"
          else
            echo "⚠ $FAILED_SCANS security scan(s) failed or had issues"
            echo "Please review the security findings in the Security tab"
          fi
          
          echo ""
          echo "Security findings can be reviewed at:"
          echo "https://github.com/${{ github.repository }}/security/code-scanning"