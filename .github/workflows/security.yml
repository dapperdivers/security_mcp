name: Comprehensive Security Scanning

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run at 3 AM UTC on Mondays to catch any issues
    - cron: '0 3 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write  # Required for OIDC token requests

jobs:
  # CodeQL Analysis for static application security testing (SAST)
  codeql-analyze:
    name: CodeQL Analysis - Python
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          # Use extended security queries for comprehensive coverage
          queries: security-extended

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # Continue even if some dependencies fail to install

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "codeql:language/python"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install and run Safety check
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip
          pip install safety
          
          # Run safety check and continue on error to capture results
          echo "=== Checking for known vulnerabilities ==="
          safety check --continue-on-error || true

  bearer-scan:
    name: Bearer Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Bearer CLI
        run: |
          BEARER_VERSION=$(curl -s https://api.github.com/repos/Bearer/bearer/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo "Installing Bearer v${BEARER_VERSION}"
          curl -L -o /tmp/bearer.tar.gz \
            "https://github.com/Bearer/bearer/releases/download/v${BEARER_VERSION}/bearer_${BEARER_VERSION}_linux_amd64.tar.gz"
          sudo tar -xzf /tmp/bearer.tar.gz -C /usr/local/bin/
          sudo chmod +x /usr/local/bin/bearer
          bearer version
          
          # Verify SARIF support
          echo "Checking Bearer SARIF support..."
          bearer scan --help | grep -i sarif || echo "Note: SARIF format support check"

      - name: Run Bearer Security Scan
        id: bearer-scan
        continue-on-error: true
        run: |
          # Run Bearer scan with verbose output for debugging
          echo "Starting Bearer scan..."
          bearer scan . \
            --format sarif \
            --output bearer-results.sarif \
            --quiet 2>&1 | tee bearer-scan.log || SCAN_EXIT_CODE=$?
          
          # Check scan results
          if [ -f bearer-results.sarif ]; then
            echo "Bearer SARIF file created successfully"
            FILE_SIZE=$(stat -c%s bearer-results.sarif 2>/dev/null || stat -f%z bearer-results.sarif 2>/dev/null || echo "0")
            echo "File size: ${FILE_SIZE} bytes"
            
            # Validate SARIF structure
            if python3 -m json.tool bearer-results.sarif > /dev/null 2>&1; then
              echo "SARIF file is valid JSON"
              echo "sarif-valid=true" >> $GITHUB_OUTPUT
            else
              echo "Warning: SARIF file may be malformed"
              echo "Creating valid empty SARIF file"
              cat > bearer-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "Bearer",
                  "informationUri": "https://docs.bearer.com/",
                  "version": "1.0.0",
                  "rules": []
                }
              },
              "results": []
            }]
          }
          EOF
              echo "sarif-valid=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Bearer scan did not produce SARIF file, creating empty valid file"
            cat > bearer-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "Bearer",
                  "informationUri": "https://docs.bearer.com/",
                  "version": "1.0.0",
                  "rules": []
                }
              },
              "results": []
            }]
          }
          EOF
            echo "sarif-valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Output debug information
          echo "::group::Bearer SARIF File Preview"
          head -50 bearer-results.sarif || true
          echo "::endgroup::"

      - name: Upload Bearer SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: bearer-results.sarif
          category: "bearer-security"
          wait-for-processing: true


  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container Security Scanning with Grype
  container-scan-grype:
    name: Container Scan - Grype
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t bearer-mcp:security-scan .

      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        id: grype
        continue-on-error: true
        with:
          image: bearer-mcp:security-scan
          fail-build: false
          severity-cutoff: none
          output-format: sarif
          add-cpes-if-none: true

      - name: Upload Grype SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.grype.outputs.sarif != ''
        continue-on-error: true
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: "grype-container"
          wait-for-processing: true

  # Container Security Scanning with Trivy
  container-scan-trivy:
    name: Container Scan - Trivy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t bearer-mcp:security-scan .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: bearer-mcp:security-scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Validate and Upload Trivy SARIF results
        if: always()
        continue-on-error: true
        run: |
          # Validate Trivy SARIF before upload
          if [ -f trivy-results.sarif ]; then
            echo "Trivy SARIF file found"
            if python3 -m json.tool trivy-results.sarif > /dev/null 2>&1; then
              echo "Trivy SARIF is valid JSON, uploading..."
            else
              echo "Warning: Trivy SARIF may be malformed, attempting to fix..."
              # Try to fix common issues
              python3 -c "import json; data = open('trivy-results.sarif').read(); json.loads(data)" 2>/dev/null || 
              echo '{"version":"2.1.0","runs":[]}' > trivy-results.sarif
            fi
          else
            echo "No Trivy SARIF file found"
          fi

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: trivy-results.sarif
          category: "trivy-container"
          wait-for-processing: true


  # Debug job to check SARIF uploads
  sarif-upload-check:
    name: SARIF Upload Verification
    runs-on: ubuntu-latest
    needs: [codeql-analyze, bearer-scan, container-scan-grype, container-scan-trivy]
    if: always()
    permissions:
      security-events: read
    
    steps:
      - name: Check Code Scanning Alerts
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Checking Code Scanning Results ==="
          
          # Get recent code scanning analyses
          ANALYSES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/analyses?per_page=10" || echo "[]")
          
          echo "Recent Code Scanning Analyses:"
          echo "$ANALYSES" | python3 -c "import json, sys; 
          data = json.load(sys.stdin) if sys.stdin else []; 
          if not data: print('No analyses found'); 
          [print(f'- {a[\"tool\"][\"name\"]} ({a.get(\"category\", \"default\")}) - {a[\"created_at\"]}') for a in data[:5]]"
          
          # Get code scanning alerts count
          ALERTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts" || echo "[]")
          
          ALERT_COUNT=$(echo "$ALERTS" | python3 -c "import json, sys; print(len(json.load(sys.stdin)))" 2>/dev/null || echo "0")
          echo ""
          echo "Total Code Scanning Alerts: $ALERT_COUNT"
          
          # Check for SARIF upload errors in this workflow
          echo ""
          echo "=== Checking for SARIF Upload Issues ==="
          echo "Note: SARIF uploads may take a few minutes to process"
          echo "Check the Security tab for results: https://github.com/${{ github.repository }}/security/code-scanning"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analyze, dependency-check, bearer-scan, secrets-scan, container-scan-grype, container-scan-trivy, sarif-upload-check]
    if: always()
    
    steps:
      - name: Security Scan Summary
        run: |
          echo "=== Comprehensive Security Scan Results Summary ==="
          echo "CodeQL Analysis: ${{ needs.codeql-analyze.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Bearer Scan: ${{ needs.bearer-scan.result }}"
          echo "Secret Detection: ${{ needs.secrets-scan.result }}"
          echo "Container Scan (Grype): ${{ needs.container-scan-grype.result }}"
          echo "Container Scan (Trivy): ${{ needs.container-scan-trivy.result }}"
          echo "SARIF Upload Check: ${{ needs.sarif-upload-check.result }}"
          echo ""
          
          # Count successful scans
          SUCCESS_COUNT=0
          TOTAL_SCANS=6
          
          [ "${{ needs.codeql-analyze.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.dependency-check.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.bearer-scan.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.secrets-scan.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.container-scan-grype.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "${{ needs.container-scan-trivy.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          
          echo "Successfully completed: ${SUCCESS_COUNT}/${TOTAL_SCANS} scans"
          echo ""
          
          if [ "$SUCCESS_COUNT" -eq "$TOTAL_SCANS" ]; then
            echo "✓ All security scans completed successfully!"
            echo "All results have been uploaded to GitHub Security Dashboard."
          else
            echo "⚠ Some security scans encountered issues - review logs above"
            echo "Check the GitHub Security tab for detailed vulnerability reports."
          fi
          
          echo ""
          echo "=== Next Steps ==="
          echo "1. Review the Security tab in GitHub for detailed findings"
          echo "2. Address any critical or high severity vulnerabilities"
          echo "3. Check workflow logs for any scan failures"