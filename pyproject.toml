[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bearer-mcp-server"
version = "1.0.0"
description = "MCP server that wraps the Bearer CLI security scanning tool"
authors = [
    {name = "Bearer MCP Server", email = "noreply@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["mcp", "security", "bearer", "sast", "vulnerability-scanning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "mcp>=1.2.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    # Security scanning
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "pip-audit>=2.9.0",
    # SBOM generation
    "cyclonedx-python-lib>=9.0.0",
    "cyclonedx-bom>=4.3.0",
    # Development workflow
    "pre-commit>=3.5.0",
    "pip-licenses>=4.3.0",
]

[project.urls]
Homepage = "https://github.com/bearer/bearer"
Documentation = "https://docs.bearer.com"
Repository = "https://github.com/bearer/bearer"
Issues = "https://github.com/bearer/bearer/issues"

[project.scripts]
bearer-mcp-server = "bearer_mcp_server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["bearer_mcp_server*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bearer_mcp_server"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related"
]

[tool.coverage.run]
source = ["bearer_mcp"]
omit = [
    "tests/*",
    "bearer_mcp_main.py",
    "*/site-packages/*",
    "*/__pycache__/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true
skip_covered = false
fail_under = 70

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # flake8-bandit (security)
    "N",  # pep8-naming
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "S101", # use of assert detected
]
line-length = 88
target-version = "py310"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
"bearer_mcp/__init__.py" = ["F401"]

[tool.bandit]
skips = ["B101"]
exclude_dirs = ["tests"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
max-complexity = 10
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101"
]